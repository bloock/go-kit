// Code generated by MockGen. DO NOT EDIT.
// Source: http/http_request.go

// Package mock_request is a generated GoMock package.
package mock_request

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHttpRequest is a mock of HttpRequest interface.
type MockHttpRequest struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestMockRecorder
}

// MockHttpRequestMockRecorder is the mock recorder for MockHttpRequest.
type MockHttpRequestMockRecorder struct {
	mock *MockHttpRequest
}

// NewMockHttpRequest creates a new mock instance.
func NewMockHttpRequest(ctrl *gomock.Controller) *MockHttpRequest {
	mock := &MockHttpRequest{ctrl: ctrl}
	mock.recorder = &MockHttpRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequest) EXPECT() *MockHttpRequestMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockHttpRequest) Delete(url string, body, response interface{}, headers map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", url, body, response, headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockHttpRequestMockRecorder) Delete(url, body, response, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHttpRequest)(nil).Delete), url, body, response, headers)
}

// Get mocks base method.
func (m *MockHttpRequest) Get(url string, response interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockHttpRequestMockRecorder) Get(url, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHttpRequest)(nil).Get), url, response)
}

// Post mocks base method.
func (m *MockHttpRequest) Post(url string, body, response interface{}, contentType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", url, body, response, contentType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockHttpRequestMockRecorder) Post(url, body, response, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHttpRequest)(nil).Post), url, body, response, contentType)
}

// PostWithHeaders mocks base method.
func (m *MockHttpRequest) PostWithHeaders(url string, body, response interface{}, headers map[string]string, contentType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostWithHeaders", url, body, response, headers, contentType)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostWithHeaders indicates an expected call of PostWithHeaders.
func (mr *MockHttpRequestMockRecorder) PostWithHeaders(url, body, response, headers, contentType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostWithHeaders", reflect.TypeOf((*MockHttpRequest)(nil).PostWithHeaders), url, body, response, headers, contentType)
}
