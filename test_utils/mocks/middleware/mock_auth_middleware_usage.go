// Code generated by MockGen. DO NOT EDIT.
// Source: http/middleware/auth_middleware.go

// Package mock_middleware is a generated GoMock package.
package mock_middleware

import (
	reflect "reflect"

	middleware "github.com/bloock/go-kit/http/middleware"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthMiddleware is a mock of AuthMiddleware interface.
type MockAuthMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMiddlewareMockRecorder
}

// MockAuthMiddlewareMockRecorder is the mock recorder for MockAuthMiddleware.
type MockAuthMiddlewareMockRecorder struct {
	mock *MockAuthMiddleware
}

// NewMockAuthMiddleware creates a new mock instance.
func NewMockAuthMiddleware(ctrl *gomock.Controller) *MockAuthMiddleware {
	mock := &MockAuthMiddleware{ctrl: ctrl}
	mock.recorder = &MockAuthMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthMiddleware) EXPECT() *MockAuthMiddlewareMockRecorder {
	return m.recorder
}

// GetCredentialsAuthenticate mocks base method.
func (m *MockAuthMiddleware) GetCredentialsAuthenticate(ctx *gin.Context) (middleware.CredentialAuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsAuthenticate", ctx)
	ret0, _ := ret[0].(middleware.CredentialAuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsAuthenticate indicates an expected call of GetCredentialsAuthenticate.
func (mr *MockAuthMiddlewareMockRecorder) GetCredentialsAuthenticate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsAuthenticate", reflect.TypeOf((*MockAuthMiddleware)(nil).GetCredentialsAuthenticate), ctx)
}
