// Code generated by MockGen. DO NOT EDIT.
// Source: event/event.go

// Package mock_event is a generated GoMock package.
package mock_event

import (
	reflect "reflect"
	time "time"

	event "github.com/bloock/go-kit/event"
	gomock "github.com/golang/mock/gomock"
)

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockEvent) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockEventMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockEvent)(nil).ID))
}

// OccurredOn mocks base method.
func (m *MockEvent) OccurredOn() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OccurredOn")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// OccurredOn indicates an expected call of OccurredOn.
func (mr *MockEventMockRecorder) OccurredOn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OccurredOn", reflect.TypeOf((*MockEvent)(nil).OccurredOn))
}

// Payload mocks base method.
func (m *MockEvent) Payload() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Payload indicates an expected call of Payload.
func (mr *MockEventMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockEvent)(nil).Payload))
}

// Type mocks base method.
func (m *MockEvent) Type() event.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(event.Type)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockEventMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockEvent)(nil).Type))
}

// Unmarshall mocks base method.
func (m *MockEvent) Unmarshall(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshall", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshall indicates an expected call of Unmarshall.
func (mr *MockEventMockRecorder) Unmarshall(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshall", reflect.TypeOf((*MockEvent)(nil).Unmarshall), arg0)
}
